{
  "info": {
    "name": "Telemetry APIs",
    "description": "Comprehensive API collection for Smart Home Energy Monitor Telemetry endpoints",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "version": "1.0.0"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Single Telemetry Ingestion",
      "item": [
        {
          "name": "Create Single Telemetry - Power",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"deviceId\": \"LIVING_ROOM_PLUG_01\",\n  \"category\": \"power\",\n  \"value\": 150.5,\n  \"status\": true,\n  \"timestamp\": \"2025-01-29T12:30:00Z\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/telemetry/ingest",
              "host": ["{{baseUrl}}"],
              "path": ["telemetry", "ingest"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response has required fields\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('_id');",
                  "    pm.expect(responseJson).to.have.property('deviceId');",
                  "    pm.expect(responseJson).to.have.property('category');",
                  "    pm.expect(responseJson).to.have.property('value');",
                  "    pm.expect(responseJson).to.have.property('status');",
                  "    pm.expect(responseJson).to.have.property('timestamp');",
                  "});",
                  "",
                  "pm.test(\"Device ID matches request\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.deviceId).to.eql(\"LIVING_ROOM_PLUG_01\");",
                  "});",
                  "",
                  "pm.test(\"Category is power\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.category).to.eql(\"power\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Create Single Telemetry - Temperature",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"deviceId\": \"BEDROOM_SENSOR_01\",\n  \"category\": \"temperature\",\n  \"value\": 22.5,\n  \"status\": true,\n  \"timestamp\": \"2025-01-29T12:30:00Z\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/telemetry/ingest",
              "host": ["{{baseUrl}}"],
              "path": ["telemetry", "ingest"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Temperature value is valid\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.value).to.be.a('number');",
                  "    pm.expect(responseJson.value).to.be.above(-50);",
                  "    pm.expect(responseJson.value).to.be.below(100);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Create Single Telemetry - Invalid Value",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"deviceId\": \"TEST_DEVICE\",\n  \"category\": \"power\",\n  \"value\": 2000000,\n  \"status\": true,\n  \"timestamp\": \"2025-01-29T12:30:00Z\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/telemetry/ingest",
              "host": ["{{baseUrl}}"],
              "path": ["telemetry", "ingest"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Response contains validation error\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('message');",
                  "    pm.expect(responseJson.message).to.include('Value must be between -1,000,000 and 1,000,000');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Create Single Telemetry - Invalid Device ID",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"deviceId\": \"invalid@id!\",\n  \"category\": \"power\",\n  \"value\": 150.5,\n  \"status\": true,\n  \"timestamp\": \"2025-01-29T12:30:00Z\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/telemetry/ingest",
              "host": ["{{baseUrl}}"],
              "path": ["telemetry", "ingest"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Response contains device ID error\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('message');",
                  "    pm.expect(responseJson.message).to.include('Device ID contains invalid characters');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Batch Telemetry Ingestion",
      "item": [
        {
          "name": "Create Batch Telemetry - Mixed Categories",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": [\n    {\n      \"deviceId\": \"LIVING_ROOM_PLUG_01\",\n      \"category\": \"power\",\n      \"value\": 150.5,\n      \"status\": true,\n      \"timestamp\": \"2025-01-29T12:30:00Z\"\n    },\n    {\n      \"deviceId\": \"BEDROOM_SENSOR_01\",\n      \"category\": \"temperature\",\n      \"value\": 22.5,\n      \"status\": true,\n      \"timestamp\": \"2025-01-29T12:30:00Z\"\n    },\n    {\n      \"deviceId\": \"KITCHEN_LIGHT_01\",\n      \"category\": \"lighting\",\n      \"value\": 75,\n      \"status\": true,\n      \"timestamp\": \"2025-01-29T12:30:00Z\"\n    }\n  ]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/telemetry/ingest/batch",
              "host": ["{{baseUrl}}"],
              "path": ["telemetry", "ingest", "batch"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response is an array\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"All records were created\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.lengthOf(3);",
                  "});",
                  "",
                  "pm.test(\"Each record has required fields\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    responseJson.forEach(record => {",
                  "        pm.expect(record).to.have.property('_id');",
                  "        pm.expect(record).to.have.property('deviceId');",
                  "        pm.expect(record).to.have.property('category');",
                  "        pm.expect(record).to.have.property('value');",
                  "    });",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Create Batch Telemetry - Large Batch",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": [\n    {\n      \"deviceId\": \"DEVICE_001\",\n      \"category\": \"power\",\n      \"value\": 100,\n      \"status\": true,\n      \"timestamp\": \"2025-01-29T12:30:00Z\"\n    },\n    {\n      \"deviceId\": \"DEVICE_002\",\n      \"category\": \"power\",\n      \"value\": 200,\n      \"status\": true,\n      \"timestamp\": \"2025-01-29T12:30:00Z\"\n    },\n    {\n      \"deviceId\": \"DEVICE_003\",\n      \"category\": \"power\",\n      \"value\": 300,\n      \"status\": true,\n      \"timestamp\": \"2025-01-29T12:30:00Z\"\n    },\n    {\n      \"deviceId\": \"DEVICE_004\",\n      \"category\": \"power\",\n      \"value\": 400,\n      \"status\": true,\n      \"timestamp\": \"2025-01-29T12:30:00Z\"\n    },\n    {\n      \"deviceId\": \"DEVICE_005\",\n      \"category\": \"power\",\n      \"value\": 500,\n      \"status\": true,\n      \"timestamp\": \"2025-01-29T12:30:00Z\"\n    }\n  ]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/telemetry/ingest/batch",
              "host": ["{{baseUrl}}"],
              "path": ["telemetry", "ingest", "batch"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"All 5 records were created\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.lengthOf(5);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Create Batch Telemetry - Empty Batch",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": []\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/telemetry/ingest/batch",
              "host": ["{{baseUrl}}"],
              "path": ["telemetry", "ingest", "batch"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Response contains empty batch error\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('message');",
                  "    pm.expect(responseJson.message).to.include('Batch data cannot be empty');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Create Batch Telemetry - Invalid Record",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": [\n    {\n      \"deviceId\": \"DEVICE_001\",\n      \"category\": \"power\",\n      \"value\": 100,\n      \"status\": true,\n      \"timestamp\": \"2025-01-29T12:30:00Z\"\n    },\n    {\n      \"deviceId\": \"DEVICE_002\",\n      \"category\": \"power\",\n      \"value\": 2000000,\n      \"status\": true,\n      \"timestamp\": \"2025-01-29T12:30:00Z\"\n    }\n  ]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/telemetry/ingest/batch",
              "host": ["{{baseUrl}}"],
              "path": ["telemetry", "ingest", "batch"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Response contains validation error\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('message');",
                  "    pm.expect(responseJson.message).to.include('Record 2: Value must be between -1,000,000 and 1,000,000');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Telemetry Reading Queries",
      "item": [
        {
          "name": "Get Telemetry Readings with Time Range",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/telemetry/devices/LIVING_ROOM_PLUG_01/readings?startTime=2025-01-29T00:00:00Z&endTime=2025-01-29T23:59:59Z",
              "host": ["{{baseUrl}}"],
              "path": [
                "telemetry",
                "devices",
                "LIVING_ROOM_PLUG_01",
                "readings"
              ],
              "query": [
                {
                  "key": "startTime",
                  "value": "2025-01-29T00:00:00Z"
                },
                {
                  "key": "endTime",
                  "value": "2025-01-29T23:59:59Z"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"All records are within time range\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    const startTime = new Date('2025-01-29T00:00:00Z');",
                  "    const endTime = new Date('2025-01-29T23:59:59Z');",
                  "    responseJson.forEach(record => {",
                  "        const recordTime = new Date(record.timestamp);",
                  "        pm.expect(recordTime).to.be.at.least(startTime);",
                  "        pm.expect(recordTime).to.be.at.most(endTime);",
                  "    });",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Telemetry Readings with Limit",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/telemetry/devices/LIVING_ROOM_PLUG_01/readings?limit=5",
              "host": ["{{baseUrl}}"],
              "path": [
                "telemetry",
                "devices",
                "LIVING_ROOM_PLUG_01",
                "readings"
              ],
              "query": [
                {
                  "key": "limit",
                  "value": "5"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response respects limit\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.length).to.be.at.most(5);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Device-Specific Readings",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/telemetry/devices/LIVING_ROOM_PLUG_01/readings",
              "host": ["{{baseUrl}}"],
              "path": [
                "telemetry",
                "devices",
                "LIVING_ROOM_PLUG_01",
                "readings"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"All records are for specific device\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    responseJson.forEach(record => {",
                  "        pm.expect(record.deviceId).to.eql(\"LIVING_ROOM_PLUG_01\");",
                  "    });",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Device Statistics",
      "item": [
        {
          "name": "Get Device Stats - Default 24 Hours",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/telemetry/devices/LIVING_ROOM_PLUG_01/stats",
              "host": ["{{baseUrl}}"],
              "path": ["telemetry", "devices", "LIVING_ROOM_PLUG_01", "stats"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has required structure\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('deviceId');",
                  "    pm.expect(responseJson).to.have.property('period');",
                  "    pm.expect(responseJson).to.have.property('categories');",
                  "});",
                  "",
                  "pm.test(\"Device ID matches request\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.deviceId).to.eql(\"LIVING_ROOM_PLUG_01\");",
                  "});",
                  "",
                  "pm.test(\"Period has correct structure\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.period).to.have.property('startTime');",
                  "    pm.expect(responseJson.period).to.have.property('endTime');",
                  "    pm.expect(responseJson.period).to.have.property('hours');",
                  "    pm.expect(responseJson.period.hours).to.eql(24);",
                  "});",
                  "",
                  "pm.test(\"Categories is an array\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.categories).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Device Stats - Custom Hours",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/telemetry/devices/LIVING_ROOM_PLUG_01/stats?hours=48",
              "host": ["{{baseUrl}}"],
              "path": ["telemetry", "devices", "LIVING_ROOM_PLUG_01", "stats"],
              "query": [
                {
                  "key": "hours",
                  "value": "48"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Hours parameter is respected\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.period.hours).to.eql(48);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Device Stats - Invalid Hours",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/telemetry/devices/LIVING_ROOM_PLUG_01/stats?hours=200",
              "host": ["{{baseUrl}}"],
              "path": ["telemetry", "devices", "LIVING_ROOM_PLUG_01", "stats"],
              "query": [
                {
                  "key": "hours",
                  "value": "200"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Response contains hours validation error\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('message');",
                  "    pm.expect(responseJson.message).to.include('Hours must be between 1 and 168');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Device Stats - Empty Device ID",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/telemetry/devices//stats",
              "host": ["{{baseUrl}}"],
              "path": ["telemetry", "devices", "", "stats"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Response contains device ID error\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('message');",
                  "    pm.expect(responseJson.message).to.include('Device ID is required');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Data Management",
      "item": [
        {
          "name": "Delete Old Telemetry - Default 30 Days",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/telemetry/cleanup",
              "host": ["{{baseUrl}}"],
              "path": ["telemetry", "cleanup"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has cleanup summary\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('message');",
                  "    pm.expect(responseJson).to.have.property('deletedCount');",
                  "    pm.expect(responseJson).to.have.property('daysToKeep');",
                  "});",
                  "",
                  "pm.test(\"Days to keep is default value\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.daysToKeep).to.eql(30);",
                  "});",
                  "",
                  "pm.test(\"Deleted count is a number\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.deletedCount).to.be.a('number');",
                  "    pm.expect(responseJson.deletedCount).to.be.at.least(0);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Delete Old Telemetry - Custom Days",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/telemetry/cleanup?daysToKeep=7",
              "host": ["{{baseUrl}}"],
              "path": ["telemetry", "cleanup"],
              "query": [
                {
                  "key": "daysToKeep",
                  "value": "7"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Days to keep is custom value\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.daysToKeep).to.eql(7);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Delete Old Telemetry - Invalid Days",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/telemetry/cleanup?daysToKeep=400",
              "host": ["{{baseUrl}}"],
              "path": ["telemetry", "cleanup"],
              "query": [
                {
                  "key": "daysToKeep",
                  "value": "400"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Response contains days validation error\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('message');",
                  "    pm.expect(responseJson.message).to.include('Days to keep must be between 1 and 365');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Legacy Endpoints",
      "item": [
        {
          "name": "Legacy Single Telemetry Ingestion",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"deviceId\": \"LEGACY_DEVICE_01\",\n  \"category\": \"power\",\n  \"value\": 120.5,\n  \"status\": true,\n  \"timestamp\": \"2025-01-29T12:30:00Z\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/telemetry/ingest/legacy",
              "host": ["{{baseUrl}}"],
              "path": ["telemetry", "ingest", "legacy"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response has required fields\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('_id');",
                  "    pm.expect(responseJson).to.have.property('deviceId');",
                  "    pm.expect(responseJson.deviceId).to.eql(\"LEGACY_DEVICE_01\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Legacy Batch Telemetry Ingestion",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": [\n    {\n      \"deviceId\": \"LEGACY_DEVICE_01\",\n      \"category\": \"power\",\n      \"value\": 100,\n      \"status\": true,\n      \"timestamp\": \"2025-01-29T12:30:00Z\"\n    },\n    {\n      \"deviceId\": \"LEGACY_DEVICE_02\",\n      \"category\": \"temperature\",\n      \"value\": 25.0,\n      \"status\": true,\n      \"timestamp\": \"2025-01-29T12:30:00Z\"\n    }\n  ]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/telemetry/ingest/legacy",
              "host": ["{{baseUrl}}"],
              "path": ["telemetry", "ingest", "legacy"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response is an array\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.be.an('array');",
                  "    pm.expect(responseJson).to.have.lengthOf(2);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    }
  ]
}

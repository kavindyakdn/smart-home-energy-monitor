{
  "info": {
    "name": "Smart Home Energy Monitor - Device APIs",
    "description": "Comprehensive API test collection for device management endpoints",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000",
      "type": "string"
    },
    {
      "key": "deviceId",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Device Management",
      "item": [
        {
          "name": "Create Device",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"deviceId\": \"DEVICE_001\",\n  \"name\": \"Living Room Smart Plug\",\n  \"type\": \"plug\",\n  \"category\": \"power\",\n  \"room\": \"Living Room\",\n  \"ratedWattage\": 1500\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/devices",
              "host": ["{{baseUrl}}"],
              "path": ["devices"]
            },
            "description": "Create a new device with all required fields"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response has device data\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('deviceId');",
                  "    pm.expect(responseJson).to.have.property('name');",
                  "    pm.expect(responseJson).to.have.property('type');",
                  "    pm.expect(responseJson).to.have.property('category');",
                  "});",
                  "",
                  "pm.test(\"Device ID matches request\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.deviceId).to.eql('DEVICE_001');",
                  "});",
                  "",
                  "// Store device ID for subsequent tests",
                  "if (pm.response.code === 201) {",
                  "    const responseJson = pm.response.json();",
                  "    pm.collectionVariables.set('deviceId', responseJson.deviceId);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Create Device - Minimal Data",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"deviceId\": \"DEVICE_002\",\n  \"name\": \"Kitchen Light\",\n  \"type\": \"light\",\n  \"category\": \"lighting\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/devices",
              "host": ["{{baseUrl}}"],
              "path": ["devices"]
            },
            "description": "Create a device with only required fields (no optional fields)"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response has required fields\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('deviceId', 'DEVICE_002');",
                  "    pm.expect(responseJson).to.have.property('name', 'Kitchen Light');",
                  "    pm.expect(responseJson).to.have.property('type', 'light');",
                  "    pm.expect(responseJson).to.have.property('category', 'lighting');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Create Device - Invalid Data (Missing Required Fields)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Incomplete Device\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/devices",
              "host": ["{{baseUrl}}"],
              "path": ["devices"]
            },
            "description": "Test validation with missing required fields"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Response contains validation error\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('message');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Create Device - Duplicate Device ID",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"deviceId\": \"DEVICE_001\",\n  \"name\": \"Duplicate Device\",\n  \"type\": \"plug\",\n  \"category\": \"power\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/devices",
              "host": ["{{baseUrl}}"],
              "path": ["devices"]
            },
            "description": "Test creating device with duplicate deviceId"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400 or 409\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([400, 409]);",
                  "});",
                  "",
                  "pm.test(\"Response contains error message\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('message');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get All Devices",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/devices",
              "host": ["{{baseUrl}}"],
              "path": ["devices"]
            },
            "description": "Retrieve all devices"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is an array\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"Array contains at least one device\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.length).to.be.at.least(1);",
                  "});",
                  "",
                  "pm.test(\"Each device has required fields\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    responseJson.forEach(device => {",
                  "        pm.expect(device).to.have.property('deviceId');",
                  "        pm.expect(device).to.have.property('name');",
                  "        pm.expect(device).to.have.property('type');",
                  "        pm.expect(device).to.have.property('category');",
                  "    });",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Device by ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/devices/{{deviceId}}",
              "host": ["{{baseUrl}}"],
              "path": ["devices", "{{deviceId}}"]
            },
            "description": "Retrieve a specific device by ID"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has device data\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('deviceId');",
                  "    pm.expect(responseJson).to.have.property('name');",
                  "    pm.expect(responseJson).to.have.property('type');",
                  "    pm.expect(responseJson).to.have.property('category');",
                  "});",
                  "",
                  "pm.test(\"Device ID matches requested ID\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.deviceId).to.eql(pm.collectionVariables.get('deviceId'));",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Device by ID - Not Found",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/devices/NONEXISTENT_DEVICE",
              "host": ["{{baseUrl}}"],
              "path": ["devices", "NONEXISTENT_DEVICE"]
            },
            "description": "Test retrieving a non-existent device"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test(\"Response contains error message\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('message');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Update Device - Full Update",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Updated Living Room Smart Plug\",\n  \"type\": \"plug\",\n  \"category\": \"power\",\n  \"room\": \"Updated Living Room\",\n  \"ratedWattage\": 2000\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/devices/{{deviceId}}",
              "host": ["{{baseUrl}}"],
              "path": ["devices", "{{deviceId}}"]
            },
            "description": "Update device with all fields"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has updated data\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('name', 'Updated Living Room Smart Plug');",
                  "    pm.expect(responseJson).to.have.property('room', 'Updated Living Room');",
                  "    pm.expect(responseJson).to.have.property('ratedWattage', 2000);",
                  "});",
                  "",
                  "pm.test(\"Device ID remains unchanged\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.deviceId).to.eql(pm.collectionVariables.get('deviceId'));",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Update Device - Partial Update",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Partially Updated Device\",\n  \"room\": \"Bedroom\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/devices/{{deviceId}}",
              "host": ["{{baseUrl}}"],
              "path": ["devices", "{{deviceId}}"]
            },
            "description": "Update only specific fields of a device"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has updated fields\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('name', 'Partially Updated Device');",
                  "    pm.expect(responseJson).to.have.property('room', 'Bedroom');",
                  "});",
                  "",
                  "pm.test(\"Other fields remain unchanged\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('type');",
                  "    pm.expect(responseJson).to.have.property('category');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Update Device - Invalid Data",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"\",\n  \"type\": \"invalid_type\",\n  \"ratedWattage\": \"not_a_number\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/devices/{{deviceId}}",
              "host": ["{{baseUrl}}"],
              "path": ["devices", "{{deviceId}}"]
            },
            "description": "Test update with invalid data"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Response contains validation error\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('message');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Update Device - Negative Wattage",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"ratedWattage\": -50\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/devices/{{deviceId}}",
              "host": ["{{baseUrl}}"],
              "path": ["devices", "{{deviceId}}"]
            },
            "description": "Test update with negative wattage value"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Response contains validation error\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('message');",
                  "    pm.expect(responseJson.message).to.include('positive number');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Update Device - Not Found",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Updated Name\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/devices/NONEXISTENT_DEVICE",
              "host": ["{{baseUrl}}"],
              "path": ["devices", "NONEXISTENT_DEVICE"]
            },
            "description": "Test updating a non-existent device"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test(\"Response contains error message\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Delete Device",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/devices/{{deviceId}}",
              "host": ["{{baseUrl}}"],
              "path": ["devices", "{{deviceId}}"]
            },
            "description": "Delete a specific device"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response confirms deletion\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('message');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Delete Device - Not Found",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/devices/NONEXISTENT_DEVICE",
              "host": ["{{baseUrl}}"],
              "path": ["devices", "NONEXISTENT_DEVICE"]
            },
            "description": "Test deleting a non-existent device"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test(\"Response contains error message\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('message');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Device Types & Categories",
      "item": [
        {
          "name": "Create Device - Power Category",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"deviceId\": \"POWER_001\",\n  \"name\": \"Refrigerator\",\n  \"type\": \"appliance\",\n  \"category\": \"power\",\n  \"room\": \"Kitchen\",\n  \"ratedWattage\": 3000\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/devices",
              "host": ["{{baseUrl}}"],
              "path": ["devices"]
            },
            "description": "Create a power category device"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Device category is power\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.category).to.eql('power');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Create Device - Lighting Category",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"deviceId\": \"LIGHT_001\",\n  \"name\": \"Bedroom LED Strip\",\n  \"type\": \"light\",\n  \"category\": \"lighting\",\n  \"room\": \"Bedroom\",\n  \"ratedWattage\": 50\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/devices",
              "host": ["{{baseUrl}}"],
              "path": ["devices"]
            },
            "description": "Create a lighting category device"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Device category is lighting\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.category).to.eql('lighting');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Create Device - Heating Category",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"deviceId\": \"HEAT_001\",\n  \"name\": \"Smart Thermostat\",\n  \"type\": \"thermostat\",\n  \"category\": \"heating\",\n  \"room\": \"Living Room\",\n  \"ratedWattage\": 100\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/devices",
              "host": ["{{baseUrl}}"],
              "path": ["devices"]
            },
            "description": "Create a heating category device"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Device category is heating\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.category).to.eql('heating');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Edge Cases & Error Handling",
      "item": [
        {
          "name": "Create Device - Empty Body",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{}"
            },
            "url": {
              "raw": "{{baseUrl}}/devices",
              "host": ["{{baseUrl}}"],
              "path": ["devices"]
            },
            "description": "Test with empty request body"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Create Device - Invalid JSON",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"deviceId\": \"INVALID_JSON\",\n  \"name\": \"Test Device\",\n  \"type\": \"plug\",\n  \"category\": \"power\"\n  // Missing closing brace"
            },
            "url": {
              "raw": "{{baseUrl}}/devices",
              "host": ["{{baseUrl}}"],
              "path": ["devices"]
            },
            "description": "Test with malformed JSON"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Create Device - Very Long Device ID",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"deviceId\": \"VERY_LONG_DEVICE_ID_THAT_EXCEEDS_NORMAL_LENGTH_LIMITS_AND_SHOULD_POTENTIALLY_BE_REJECTED_BY_THE_SYSTEM\",\n  \"name\": \"Test Device\",\n  \"type\": \"plug\",\n  \"category\": \"power\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/devices",
              "host": ["{{baseUrl}}"],
              "path": ["devices"]
            },
            "description": "Test with very long device ID"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201 or 400\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([201, 400]);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Create Device - Special Characters in Name",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"deviceId\": \"SPECIAL_CHARS_001\",\n  \"name\": \"Device with Special Chars: !@#$%^&*()_+-=[]{}|;':\",./<>?\",\n  \"type\": \"plug\",\n  \"category\": \"power\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/devices",
              "host": ["{{baseUrl}}"],
              "path": ["devices"]
            },
            "description": "Test with special characters in device name"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Special characters are preserved\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.name).to.include('Special Chars');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Create Device - Negative Wattage",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"deviceId\": \"NEGATIVE_WATT_001\",\n  \"name\": \"Test Device\",\n  \"type\": \"plug\",\n  \"category\": \"power\",\n  \"ratedWattage\": -100\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/devices",
              "host": ["{{baseUrl}}"],
              "path": ["devices"]
            },
            "description": "Test with negative wattage value"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Response contains validation error\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('message');",
                  "    pm.expect(responseJson.message).to.include('positive number');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    }
  ]
}
